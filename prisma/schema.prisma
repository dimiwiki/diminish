generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AccessControl {
  id            Int       @id @default(autoincrement()) @db.UnsignedInt
  documentId    Int?      @map("document_id") @db.UnsignedInt
  type          Int       @db.UnsignedTinyInt
  conditionType Int       @map("condition_type") @db.UnsignedTinyInt
  condition     String    @db.VarChar(39)
  isAllowed     Boolean
  message       String?   @db.VarChar(256)
  expiry        Int       @db.UnsignedInt
  createdAt     DateTime  @map("created_at") @db.DateTime(0)
  document      Document? @relation(fields: [documentId], references: [id], onDelete: Cascade, map: "FOREIGN KEY (access_control.document_id, document.id)")

  @@unique([documentId, type, conditionType, condition], map: "UNIQUE INDEX (document_id, type, condition_type, condition)")
  @@map("access_control")
}

model Category {
  id                 Int                @id @default(autoincrement()) @db.UnsignedInt
  title              String             @unique(map: "UNIQUE INDEX (title)") @db.VarChar(256)
  documentCategories DocumentCategory[] @relation("categoryTodocument_category")

  @@map("category")
}

model Document {
  id                  Int                @id @default(autoincrement()) @db.UnsignedInt
  type                Int                @db.UnsignedTinyInt
  title               String             @db.VarChar(512)
  plain               String?            @db.MediumText
  content             String?            @db.MediumText
  accessControls      AccessControl[]
  documentCategories  DocumentCategory[] @relation("documentTodocument_category")
  documentLinks       DocumentLink[]     @relation("documentTodocument_link_document_id")
  linkedDocumentLinks DocumentLink[]     @relation("documentTodocument_link_linked_document_id")
  documentStars       DocumentStar[]
  revisions           Revision[]
  revisionBlames      RevisionBlame[]    @relation("documentTorevision_blame")
  revisionRequests    RevisionRequest?   @relation("documentTorevision_request")
  threads             Thread[]           @relation("documentTothread")

  @@unique([type, title], map: "UNIQUE INDEX (type, title)")
  @@map("document")
}

model DocumentCategory {
  documentId Int      @map("document_id") @db.UnsignedInt
  categoryId Int      @map("category_id") @db.UnsignedInt
  category   Category @relation("categoryTodocument_category", fields: [categoryId], references: [id], onDelete: Cascade, map: "FOREIGN KEY (document_category.category_id, category.id)")
  document   Document @relation("documentTodocument_category", fields: [documentId], references: [id], onDelete: Cascade, map: "FOREIGN KEY (document_category.document_id, document.id)")

  @@id([documentId, categoryId])
  @@index([categoryId], map: "FOREIGN KEY (document_category.category_id, category.id)")
  @@map("document_category")
}

model DocumentLink {
  documentId       Int      @map("document_id") @db.UnsignedInt
  linkedDocumentId Int      @map("linked_document_id") @db.UnsignedInt
  document         Document @relation("documentTodocument_link_document_id", fields: [documentId], references: [id], onDelete: Cascade, map: "FOREIGN KEY (document_link.document_id, document.id)")
  linkedDocument   Document @relation("documentTodocument_link_linked_document_id", fields: [linkedDocumentId], references: [id], onDelete: Cascade, map: "FOREIGN KEY (document_link.linked_document_id, document.id)")

  @@id([documentId, linkedDocumentId])
  @@index([linkedDocumentId], map: "FOREIGN KEY (document_link.linked_document_id, document.id)")
  @@map("document_link")
}

model DocumentStar {
  documentId Int      @map("document_id") @db.UnsignedInt
  userId     Int      @map("user_id") @db.UnsignedInt
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade, map: "FOREIGN KEY (document_star.document_id, document.id)")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FOREIGN KEY (document_star.user_id, user.id)")

  @@id([documentId, userId])
  @@index([userId], map: "FOREIGN KEY (document_star.user_id, user.id)")
  @@map("document_star")
}

model Group {
  id         Int         @id @default(autoincrement()) @db.UnsignedInt
  title      String      @unique(map: "UNIQUE INDEX (title)") @db.VarChar(256)
  userGroups UserGroup[] @relation("groupTouser_group")

  @@map("group")
}

model Image {
  id        String @id @db.VarChar(128)
  title     String @db.VarChar(512)
  extension Int    @db.UnsignedTinyInt

  @@unique([title, extension], map: "UNIQUE INDEX (title, extension)")
  @@map("image")
}

model Revision {
  id               Int               @db.UnsignedInt
  documentId       Int               @map("document_id") @db.UnsignedInt
  revisionId       Int?              @map("revision_id") @db.UnsignedInt
  authorType       Int               @map("author_type") @db.UnsignedTinyInt
  author           String            @db.VarChar(39)
  content          Bytes?            @db.MediumBlob
  size             Int
  comment          String            @db.VarChar(256)
  createdAt        DateTime          @default(now()) @map("created_at") @db.DateTime(0)
  document         Document          @relation(fields: [documentId], references: [id], onDelete: Cascade, map: "FOREIGN KEY (revision.document_id, document.id)")
  revision         Revision?         @relation("revisionTorevision_revision_id", fields: [documentId, revisionId], references: [documentId, id], onDelete: Cascade, map: "FOREIGN KEY (revision.revision_id, revision.id)")
  revisions        Revision[]        @relation("revisionTorevision_revision_id")
  revisionBlames   RevisionBlame[]   @relation("revisionTorevision_blame")
  revisionRequests RevisionRequest[] @relation("revisionTorevision_request")

  @@id([id, documentId])
  @@index([documentId], map: "FOREIGN KEY (revision.document_id, document.id)")
  @@index([revisionId], map: "FOREIGN KEY (revision.revision_id, revision.id)")
  @@map("revision")
}

model RevisionBlame {
  documentId Int      @map("document_id") @db.UnsignedInt
  revisionId Int      @map("revision_id") @db.UnsignedInt
  line       Int      @db.UnsignedInt
  document   Document @relation("documentTorevision_blame", fields: [documentId], references: [id], onDelete: Cascade, map: "FOREIGN KEY (revision_blame.document_id, document.id)")
  revision   Revision @relation("revisionTorevision_blame", fields: [documentId, revisionId], references: [documentId, id], onDelete: Cascade, map: "FOREIGN KEY (revision_blame.revision_id, revision.id)")

  @@id([documentId, revisionId])
  @@index([documentId], map: "FOREIGN KEY (revision_blame.document_id, document.id)")
  @@index([revisionId], map: "FOREIGN KEY (revision_blame.revision_id, revision.id)")
  @@map("revision_blame")
}

model RevisionRequest {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  documentId Int      @unique(map: "UNIQUE INDEX(document_id, revision_id)") @map("document_id") @db.UnsignedInt
  revisionId Int      @map("revision_id") @db.UnsignedInt
  authorType Int      @map("author_type") @db.UnsignedTinyInt
  author     String   @db.VarChar(39)
  content    Bytes?   @db.MediumBlob
  status     Int      @db.UnsignedTinyInt
  createdAt  DateTime @map("created_at") @db.DateTime(0)
  document   Document @relation("documentTorevision_request", fields: [documentId], references: [id], onDelete: Cascade, map: "FOREIGN KEY (revision_request.document_id, document.id)")
  revision   Revision @relation("revisionTorevision_request", fields: [documentId, revisionId], references: [documentId, id], onDelete: Cascade, map: "FOREIGN KEY (revision_request.revision_id, revision.id)")

  @@index([revisionId], map: "FOREIGN KEY (revision_request.revision_id, revision.id)")
  @@map("revision_request")
}

model Thread {
  id             Int             @id @default(autoincrement()) @db.UnsignedInt
  documentId     Int             @map("document_id") @db.UnsignedInt
  title          String          @db.VarChar(512)
  authorType     Int             @map("author_type") @db.UnsignedTinyInt
  author         String          @db.VarChar(39)
  document       Document        @relation("documentTothread", fields: [documentId], references: [id], onDelete: Cascade, map: "FOREIGN KEY (thread.document_id, document.id)")
  threadComments ThreadComment[] @relation("threadTothread_comment")

  @@unique([documentId, title], map: "UNIQUE INDEX (document_id, title)")
  @@map("thread")
}

model ThreadComment {
  id         Int      @db.UnsignedInt
  threadId   Int      @map("thread_id") @db.UnsignedInt
  authorType Int      @map("author_type") @db.UnsignedTinyInt
  author     String   @db.VarChar(39)
  content    String   @db.Text
  createdAt  DateTime @default(now()) @map("created_at") @db.DateTime(0)
  thread     Thread   @relation("threadTothread_comment", fields: [threadId], references: [id], onDelete: Cascade, map: "FOREIGN KEY (thread_comment.thread_id, thread.id)")

  @@id([id, threadId])
  @@index([threadId], map: "FOREIGN KEY (thread_comment.thread_id, thread.id)")
  @@map("thread_comment")
}

model User {
  id              Int            @id @default(autoincrement()) @db.UnsignedInt
  name            String         @unique(map: "UNIQUE INDEX (name)") @db.VarChar(32)
  password        String         @db.VarChar(128)
  email           String         @unique(map: "UNIQUE INDEX (email)") @db.VarChar(256)
  permission      Int            @db.UnsignedTinyInt
  verificationKey String?        @unique(map: "UNIQUE INDEX (verification_key)") @map("verification_key") @db.VarChar(128)
  createdAt       DateTime       @map("created_at") @db.DateTime(0)
  documentStars   DocumentStar[]
  userConfigs     UserConfig[]   @relation("userTouser_config")
  userGroups      UserGroup[]    @relation("userTouser_group")

  @@map("user")
}

model UserConfig {
  userId Int  @map("user_id") @db.UnsignedInt
  type   Int  @db.UnsignedTinyInt
  value  Int  @db.UnsignedTinyInt
  user   User @relation("userTouser_config", fields: [userId], references: [id], onDelete: Cascade, map: "FOREIGN KEY (user_config.user_id, user.id)")

  @@id([userId, type])
  @@map("user_config")
}

model UserGroup {
  userId  Int   @map("user_id") @db.UnsignedInt
  groupId Int   @map("group_id") @db.UnsignedInt
  group   Group @relation("groupTouser_group", fields: [groupId], references: [id], onDelete: Cascade, map: "FOREIGN KEY (user_group.group_id, group.id)")
  user    User  @relation("userTouser_group", fields: [userId], references: [id], onDelete: Cascade, map: "FOREIGN KEY (user_group.user_id, user.id)")

  @@id([userId, groupId])
  @@index([groupId], map: "FOREIGN KEY (user_group.group_id, group.id)")
  @@map("user_group")
}
